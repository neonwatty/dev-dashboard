// <%= class_name %> Stimulus Controller
// Mobile-optimized interactions and touch handling

import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = []
  static values = {}
  static classes = []

  connect() {
    // Initialize mobile-specific interactions
    this.setupTouchHandlers()
    this.setupResponsiveObserver()
  }

  disconnect() {
    // Clean up observers and event listeners
    if (this.resizeObserver) {
      this.resizeObserver.disconnect()
    }
  }

  // Mobile touch handlers
  setupTouchHandlers() {
    // Add touch-specific event handlers
    this.element.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true })
    this.element.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true })
  }

  handleTouchStart(event) {
    // Handle touch start for mobile interactions
    this.element.classList.add('touch-active')
  }

  handleTouchEnd(event) {
    // Handle touch end
    setTimeout(() => {
      this.element.classList.remove('touch-active')
    }, 150)
  }

  // Responsive behavior observer
  setupResponsiveObserver() {
    // Watch for viewport changes and adjust behavior
    if (window.ResizeObserver) {
      this.resizeObserver = new ResizeObserver(entries => {
        this.handleResize()
      })
      this.resizeObserver.observe(this.element)
    }
  }

  handleResize() {
    // Adjust component behavior based on viewport size
    const isMobile = window.innerWidth < 640 // sm breakpoint
    
    if (isMobile) {
      this.element.classList.add('mobile-mode')
    } else {
      this.element.classList.remove('mobile-mode')
    }
  }

  // Example action method
  exampleAction(event) {
    event.preventDefault()
    
    // Add mobile-friendly feedback
    this.showTouchFeedback(event.currentTarget)
    
    // Perform action
    console.log('<%= class_name %> action triggered')
  }

  // Utility methods
  showTouchFeedback(element) {
    element.classList.add('pressed')
    setTimeout(() => {
      element.classList.remove('pressed')
    }, 100)
  }

  isMobile() {
    return window.innerWidth < 640
  }

  isTouch() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0
  }
}