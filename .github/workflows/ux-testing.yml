name: Comprehensive UX Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run UX tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - desktop
          - mobile
          - performance
          - accessibility

jobs:
  ux-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/dev_dashboard_test
      PLAYWRIGHT_BASE_URL: http://localhost:3000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        bundle install

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Set up database
      run: |
        bin/rails db:create
        bin/rails db:schema:load
        bin/rails db:fixtures:load

    - name: Precompile assets
      run: |
        bin/rails assets:precompile
        npm run build

    - name: Start Rails server
      run: |
        bin/rails server -e test -p 3000 &
        sleep 10
        curl -f http://localhost:3000 || exit 1

    - name: Run Desktop UX Tests
      if: matrix.device == 'desktop'
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=${{ matrix.browser }}-desktop-fhd \
          test/playwright/desktop/ \
          --reporter=html,json
      continue-on-error: true

    - name: Run Mobile UX Tests  
      if: matrix.device == 'mobile'
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=mobile-${{ matrix.browser == 'webkit' && 'safari' || 'chrome' }}-iphone-12 \
          test/playwright/mobile/ \
          --reporter=html,json
      continue-on-error: true

    - name: Run Performance Tests
      if: matrix.device == 'desktop' && matrix.browser == 'chromium'
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=chromium-desktop-fhd \
          test/playwright/performance/ \
          --reporter=html,json
      continue-on-error: true

    - name: Run Accessibility Tests
      if: matrix.device == 'desktop'
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=${{ matrix.browser }}-desktop-fhd \
          test/playwright/accessibility/ \
          --reporter=html,json
      continue-on-error: true

    - name: Run Integration Tests
      if: matrix.device == 'desktop' && matrix.browser == 'chromium'
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=chromium-desktop-fhd \
          test/playwright/integration/ \
          --reporter=html,json
      continue-on-error: true

    - name: Generate UX Test Report
      if: always()
      run: |
        node test/playwright/scripts/run-ux-tests.js || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ux-test-results-${{ matrix.browser }}-${{ matrix.device }}
        path: |
          test/playwright-report/
          test-results/
        retention-days: 30

    - name: Upload Playwright HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.device }}
        path: playwright-report/
        retention-days: 30

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && matrix.browser == 'chromium' && matrix.device == 'desktop'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportPath = 'test/playwright-report/ux-test-results.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const comment = `## 🧪 UX Test Results
              
              **Status:** ${report.summary.success ? '✅ Passed' : '❌ Failed'}
              **Duration:** ${report.summary.duration}
              **Browser:** ${{ matrix.browser }} (${{ matrix.device }})
              
              ### Summary
              - ✅ **Passed:** ${report.summary.passed}
              - ❌ **Failed:** ${report.summary.failed}
              - ⏭️ **Skipped:** ${report.summary.skipped}
              
              ### Test Suites
              ${Object.entries(report.suites).map(([name, results]) => 
                `- **${name}:** ${results.passed} passed, ${results.failed} failed, ${results.skipped} skipped`
              ).join('\\n')}
              
              ${report.recommendations.length > 0 ? `
              ### Recommendations
              ${report.recommendations.slice(0, 3).map(rec => 
                `- **${rec.category}** (${rec.priority}): ${rec.recommendation}`
              ).join('\\n')}
              ` : ''}
              
              [View detailed report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post comment:', error.message);
          }

  performance-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Run Core Web Vitals Monitoring
      run: |
        npx playwright test \
          --config=playwright.config.js \
          --project=chromium-desktop-fhd \
          test/playwright/performance/core-web-vitals.spec.js \
          --reporter=json > performance-results.json

    - name: Analyze Performance Trends
      run: |
        node -e "
        const fs = require('fs');
        const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));
        
        // Extract performance metrics
        const metrics = {
          timestamp: new Date().toISOString(),
          lcp: results.tests?.find(t => t.title.includes('LCP'))?.duration || null,
          fid: results.tests?.find(t => t.title.includes('FID'))?.duration || null,
          cls: results.tests?.find(t => t.title.includes('CLS'))?.duration || null
        };
        
        // Store historical data
        let history = [];
        if (fs.existsSync('performance-history.json')) {
          history = JSON.parse(fs.readFileSync('performance-history.json', 'utf8'));
        }
        
        history.push(metrics);
        
        // Keep last 30 days
        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        history = history.filter(h => new Date(h.timestamp) > thirtyDaysAgo);
        
        fs.writeFileSync('performance-history.json', JSON.stringify(history, null, 2));
        console.log('Performance monitoring complete:', metrics);
        "

    - name: Upload performance data
      uses: actions/upload-artifact@v4
      with:
        name: performance-monitoring
        path: performance-history.json